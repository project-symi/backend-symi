// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/news_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockNewsRepository is a mock of NewsRepository interface
type MockNewsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRepositoryMockRecorder
}

// MockNewsRepositoryMockRecorder is the mock recorder for MockNewsRepository
type MockNewsRepositoryMockRecorder struct {
	mock *MockNewsRepository
}

// NewMockNewsRepository creates a new mock instance
func NewMockNewsRepository(ctrl *gomock.Controller) *MockNewsRepository {
	mock := &MockNewsRepository{ctrl: ctrl}
	mock.recorder = &MockNewsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewsRepository) EXPECT() *MockNewsRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockNewsRepository) GetAll() (domain.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(domain.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockNewsRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNewsRepository)(nil).GetAll))
}

// DeleteByNewsId mocks base method
func (m *MockNewsRepository) DeleteByNewsId(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByNewsId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByNewsId indicates an expected call of DeleteByNewsId
func (mr *MockNewsRepositoryMockRecorder) DeleteByNewsId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByNewsId", reflect.TypeOf((*MockNewsRepository)(nil).DeleteByNewsId), arg0)
}

// AddNewsItem mocks base method
func (m *MockNewsRepository) AddNewsItem(arg0 domain.NewsPost) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewsItem", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewsItem indicates an expected call of AddNewsItem
func (mr *MockNewsRepositoryMockRecorder) AddNewsItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewsItem", reflect.TypeOf((*MockNewsRepository)(nil).AddNewsItem), arg0)
}
