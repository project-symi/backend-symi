// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/gender_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockGenderRepository is a mock of GenderRepository interface
type MockGenderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenderRepositoryMockRecorder
}

// MockGenderRepositoryMockRecorder is the mock recorder for MockGenderRepository
type MockGenderRepositoryMockRecorder struct {
	mock *MockGenderRepository
}

// NewMockGenderRepository creates a new mock instance
func NewMockGenderRepository(ctrl *gomock.Controller) *MockGenderRepository {
	mock := &MockGenderRepository{ctrl: ctrl}
	mock.recorder = &MockGenderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenderRepository) EXPECT() *MockGenderRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockGenderRepository) FindAll() (domain.Genders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(domain.Genders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockGenderRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGenderRepository)(nil).FindAll))
}
