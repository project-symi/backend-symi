// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/department_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockDepartmentRepository is a mock of DepartmentRepository interface
type MockDepartmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentRepositoryMockRecorder
}

// MockDepartmentRepositoryMockRecorder is the mock recorder for MockDepartmentRepository
type MockDepartmentRepositoryMockRecorder struct {
	mock *MockDepartmentRepository
}

// NewMockDepartmentRepository creates a new mock instance
func NewMockDepartmentRepository(ctrl *gomock.Controller) *MockDepartmentRepository {
	mock := &MockDepartmentRepository{ctrl: ctrl}
	mock.recorder = &MockDepartmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDepartmentRepository) EXPECT() *MockDepartmentRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockDepartmentRepository) FindAll() (domain.Departments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(domain.Departments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockDepartmentRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDepartmentRepository)(nil).FindAll))
}
