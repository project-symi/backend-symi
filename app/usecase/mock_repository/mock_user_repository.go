// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/user_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindKeyIdByEmployeeId mocks base method
func (m *MockUserRepository) FindKeyIdByEmployeeId(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKeyIdByEmployeeId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindKeyIdByEmployeeId indicates an expected call of FindKeyIdByEmployeeId
func (mr *MockUserRepositoryMockRecorder) FindKeyIdByEmployeeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKeyIdByEmployeeId", reflect.TypeOf((*MockUserRepository)(nil).FindKeyIdByEmployeeId), arg0)
}

// FindAll mocks base method
func (m *MockUserRepository) FindAll() (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockUserRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll))
}

// FindTopPointsUsers mocks base method
func (m *MockUserRepository) FindTopPointsUsers(arg0 int) (domain.UsersWithPoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopPointsUsers", arg0)
	ret0, _ := ret[0].(domain.UsersWithPoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopPointsUsers indicates an expected call of FindTopPointsUsers
func (mr *MockUserRepositoryMockRecorder) FindTopPointsUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopPointsUsers", reflect.TypeOf((*MockUserRepository)(nil).FindTopPointsUsers), arg0)
}

// FindByEmployeeId mocks base method
func (m *MockUserRepository) FindByEmployeeId(arg0 string) (domain.UserInfoWithPoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmployeeId", arg0)
	ret0, _ := ret[0].(domain.UserInfoWithPoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmployeeId indicates an expected call of FindByEmployeeId
func (mr *MockUserRepositoryMockRecorder) FindByEmployeeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmployeeId", reflect.TypeOf((*MockUserRepository)(nil).FindByEmployeeId), arg0)
}

// FilterByName mocks base method
func (m *MockUserRepository) FilterByName(arg0 string) (domain.UsersByName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByName", arg0)
	ret0, _ := ret[0].(domain.UsersByName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByName indicates an expected call of FilterByName
func (mr *MockUserRepositoryMockRecorder) FilterByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByName", reflect.TypeOf((*MockUserRepository)(nil).FilterByName), arg0)
}

// DeleteByEmployeeId mocks base method
func (m *MockUserRepository) DeleteByEmployeeId(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEmployeeId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByEmployeeId indicates an expected call of DeleteByEmployeeId
func (mr *MockUserRepositoryMockRecorder) DeleteByEmployeeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEmployeeId", reflect.TypeOf((*MockUserRepository)(nil).DeleteByEmployeeId), arg0)
}

// IsUser mocks base method
func (m *MockUserRepository) IsUser(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUser indicates an expected call of IsUser
func (mr *MockUserRepositoryMockRecorder) IsUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUser", reflect.TypeOf((*MockUserRepository)(nil).IsUser), arg0)
}

// AddUser mocks base method
func (m *MockUserRepository) AddUser(arg0, arg1, arg2, arg3 string, arg4, arg5, arg6 int, arg7 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser
func (mr *MockUserRepositoryMockRecorder) AddUser(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ExecuteUsersQuery mocks base method
func (m *MockUserRepository) ExecuteUsersQuery(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUsersQuery", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUsersQuery indicates an expected call of ExecuteUsersQuery
func (mr *MockUserRepositoryMockRecorder) ExecuteUsersQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUsersQuery", reflect.TypeOf((*MockUserRepository)(nil).ExecuteUsersQuery), arg0)
}
