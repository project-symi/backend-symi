// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/transaction_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockTransactionRepository is a mock of TransactionRepository interface
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// StoreFeedbackAndUpdatePoints mocks base method
func (m *MockTransactionRepository) StoreFeedbackAndUpdatePoints(arg0 domain.StoredFeedback, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFeedbackAndUpdatePoints", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreFeedbackAndUpdatePoints indicates an expected call of StoreFeedbackAndUpdatePoints
func (mr *MockTransactionRepositoryMockRecorder) StoreFeedbackAndUpdatePoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFeedbackAndUpdatePoints", reflect.TypeOf((*MockTransactionRepository)(nil).StoreFeedbackAndUpdatePoints), arg0, arg1)
}
