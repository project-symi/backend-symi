// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/points_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockPointsRepository is a mock of PointsRepository interface
type MockPointsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPointsRepositoryMockRecorder
}

// MockPointsRepositoryMockRecorder is the mock recorder for MockPointsRepository
type MockPointsRepositoryMockRecorder struct {
	mock *MockPointsRepository
}

// NewMockPointsRepository creates a new mock instance
func NewMockPointsRepository(ctrl *gomock.Controller) *MockPointsRepository {
	mock := &MockPointsRepository{ctrl: ctrl}
	mock.recorder = &MockPointsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPointsRepository) EXPECT() *MockPointsRepositoryMockRecorder {
	return m.recorder
}

// FindPointsByUserId mocks base method
func (m *MockPointsRepository) FindPointsByUserId(arg0 int) (domain.Points, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPointsByUserId", arg0)
	ret0, _ := ret[0].(domain.Points)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPointsByUserId indicates an expected call of FindPointsByUserId
func (mr *MockPointsRepositoryMockRecorder) FindPointsByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPointsByUserId", reflect.TypeOf((*MockPointsRepository)(nil).FindPointsByUserId), arg0)
}
