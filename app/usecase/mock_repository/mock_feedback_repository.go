// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/repository/feedback_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "project-symi-backend/app/domain"
	reflect "reflect"
)

// MockFeedbackRepository is a mock of FeedbackRepository interface
type MockFeedbackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepositoryMockRecorder
}

// MockFeedbackRepositoryMockRecorder is the mock recorder for MockFeedbackRepository
type MockFeedbackRepositoryMockRecorder struct {
	mock *MockFeedbackRepository
}

// NewMockFeedbackRepository creates a new mock instance
func NewMockFeedbackRepository(ctrl *gomock.Controller) *MockFeedbackRepository {
	mock := &MockFeedbackRepository{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeedbackRepository) EXPECT() *MockFeedbackRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockFeedbackRepository) FindAll() (domain.Feedbacks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(domain.Feedbacks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockFeedbackRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFeedbackRepository)(nil).FindAll))
}

// FindByFeeling mocks base method
func (m *MockFeedbackRepository) FindByFeeling(arg0 string) (domain.Feedbacks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFeeling", arg0)
	ret0, _ := ret[0].(domain.Feedbacks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFeeling indicates an expected call of FindByFeeling
func (mr *MockFeedbackRepositoryMockRecorder) FindByFeeling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFeeling", reflect.TypeOf((*MockFeedbackRepository)(nil).FindByFeeling), arg0)
}

// FindByEmployeeId mocks base method
func (m *MockFeedbackRepository) FindByEmployeeId(arg0 int) (domain.FeedbackEmployees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmployeeId", arg0)
	ret0, _ := ret[0].(domain.FeedbackEmployees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmployeeId indicates an expected call of FindByEmployeeId
func (mr *MockFeedbackRepositoryMockRecorder) FindByEmployeeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmployeeId", reflect.TypeOf((*MockFeedbackRepository)(nil).FindByEmployeeId), arg0)
}

// UpdateSeen mocks base method
func (m *MockFeedbackRepository) UpdateSeen(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeen", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeen indicates an expected call of UpdateSeen
func (mr *MockFeedbackRepositoryMockRecorder) UpdateSeen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeen", reflect.TypeOf((*MockFeedbackRepository)(nil).UpdateSeen), arg0)
}

// StoreFeedback mocks base method
func (m *MockFeedbackRepository) StoreFeedback(arg0 domain.StoredFeedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFeedback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFeedback indicates an expected call of StoreFeedback
func (mr *MockFeedbackRepositoryMockRecorder) StoreFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFeedback", reflect.TypeOf((*MockFeedbackRepository)(nil).StoreFeedback), arg0)
}
